package homepage

import (
	"fmt"
	"time"
	"github.com/markojerkic/spring-planing/cmd/web/components"
	"github.com/markojerkic/spring-planing/internal/database"
)

templ RoomsPage(rooms []database.Room, userID uint) {
	@components.PageLayoutWithPath("My Rooms - Sprint Poker", "/rooms") {
		<div class="container" id="room-list-container">
			<h1 class="text-3xl font-bold mb-6 text-primary">My Rooms</h1>
			
			<div class="flex gap-2 mb-6 bg-card-bg p-4 rounded-lg shadow-sm items-stretch">
				<a href="/room" class="btn btn-primary mr-3">Create Room</a>
				<ui-modal
					buttonName="Join Existing Room"
					modalTitle="Join Existing Room"
				>
					@joinRoomForm()
				</ui-modal>
			</div>
			
			if len(rooms) == 0 {
				@noRooms()
			} else {
				<div class="room-list pt-4">
					for _, room := range rooms {
						@roomCard(room, userID)
					}
				</div>
			}
		</div>
	}
}

templ noRooms() {
	<div class="rounded-lg p-4 shadow-sm bg-card-bg max-w-[500px] mx-auto text-center">
		<div class="mb-4 text-primary flex justify-center">
			<svg
				xmlns="http://www.w3.org/2000/svg"
				width="48"
				height="48"
				viewBox="0 0 24 24"
				fill="none"
				stroke="currentColor"
				stroke-width="2"
				stroke-linecap="round"
				stroke-linejoin="round"
			>
				<rect x="2" y="7" width="20" height="14" rx="2" ry="2"></rect>
				<path d="M16 2v5"></path>
				<path d="M8 2v5"></path>
				<path d="M3 10h18"></path>
			</svg>
		</div>
		<h3 class="text-2xl text-primary mb-4">No Rooms Found</h3>
		<p class="text-text-light mb-8">You haven't created or joined any rooms yet</p>
	</div>
}

templ roomCard(room database.Room, userID uint) {
	{{ isOwner := room.CreatedBy == userID }}
	<div class={ fmt.Sprintf("card mb-3 %s", templ.SafeClass(ternary(isOwner, "card-accent", ""))) }>
		<div class="card-header">
			<div class="room-header">
				<h3 class="title mb-0">{ room.Name }</h3>
				if isRecent(room.CreatedAt) {
					<span class="badge badge-primary">New</span>
				}
			</div>
			<div class="room-meta">
				<span class="room-date">Created { formatCreatedAt(room.CreatedAt) }</span>
				if isOwner {
					<span class="badge badge-owner">Owner</span>
				}
			</div>
		</div>
		<div class="card-body">
			<div class="flex justify-between items-stretch gap-2">
				<a href={ templ.SafeURL(fmt.Sprintf("/room/%d", room.ID)) } class="btn hover:bg-primary-dark">Join Room</a>
				if isOwner {
					<button
						class="btn btn-error hover:bg-red-700"
						hx-delete={ fmt.Sprintf("/room/%d", room.ID) }
						hx-confirm="Are you sure you want to delete this room? This action cannot be undone."
						hx-target="#room-list-container"
						hx-select="#room-list-container"
						hx-swap="outerHTML"
					>
						Delete
					</button>
				}
			</div>
		</div>
	</div>
}

func ternary(condition bool, trueVal, falseVal string) string {
	if condition {
		return trueVal
	}
	return falseVal
}

func formatCreatedAt(createdAt time.Time) string {
	return createdAt.Format("Jan 2, 2006")
}

func isRecent(createdAt time.Time) bool {
	return createdAt.After(time.Now().Add(-24 * time.Hour))
}