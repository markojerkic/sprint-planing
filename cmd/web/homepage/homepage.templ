package homepage

import (
	"fmt"
	"github.com/markojerkic/spring-planing/cmd/web/components"
	"time"
	"github.com/markojerkic/spring-planing/internal/database"
)

templ RoomList(rooms []database.Room, userID uint) {
	@components.PageLayout("Sprint Poker - Group Task Estimation") {
		<div class="container" id="room-list-container">
			<div class="mb-8 text-center">
				<h1 class="text-3xl font-bold mb-4 text-primary">Sprint Poker</h1>
				<p class="text-lg mb-6 max-w-xl mx-auto">
					A collaborative tool for agile teams to estimate tasks together in real-time.
					Create a room, invite your colleagues, and estimate tasks efficiently.
				</p>
				<div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6 max-w-xl mx-auto">
					<div class="feature-card p-4 bg-card-bg rounded-lg shadow-sm text-center">
						<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mx-auto mb-2 text-primary">
							<path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2"></path>
							<circle cx="9" cy="7" r="4"></circle>
							<path d="M22 21v-2a4 4 0 0 0-3-3.87"></path>
							<path d="M16 3.13a4 4 0 0 1 0 7.75"></path>
						</svg>
						<h3 class="font-semibold">Collaborative</h3>
						<p class="text-sm">Real-time updates for all team members</p>
					</div>
					<div class="feature-card p-4 bg-card-bg rounded-lg shadow-sm text-center">
						<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mx-auto mb-2 text-primary">
							<path d="M12 20V10"></path>
							<path d="M18 20V4"></path>
							<path d="M6 20v-6"></path>
						</svg>
						<h3 class="font-semibold">Jira Integration</h3>
						<p class="text-sm">Import and export estimates to Jira</p>
					</div>
					<div class="feature-card p-4 bg-card-bg rounded-lg shadow-sm text-center">
						<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mx-auto mb-2 text-primary">
							<rect x="2" y="7" width="20" height="14" rx="2" ry="2"></rect>
							<path d="M16 2v5"></path>
							<path d="M8 2v5"></path>
							<path d="M3 10h18"></path>
						</svg>
						<h3 class="font-semibold">Flexible</h3>
						<p class="text-sm">Create tasks manually or import from Jira</p>
					</div>
				</div>
				<div class="how-it-works bg-card-bg p-4 rounded-lg shadow-sm max-w-xl mx-auto mb-8">
					<h2 class="text-xl font-semibold mb-3">How It Works</h2>
					<ol class="text-left list-decimal list-inside space-y-2">
						<li>Create a room and share the link with your team</li>
						<li>Add tasks manually or import from Jira</li>
						<li>Everyone estimates tasks in real-time</li>
						<li>Reveal estimates and discuss differences</li>
						<li>Export final estimates back to Jira or copy in Jira format</li>
					</ol>
				</div>
			</div>
			
			<h2 class="mb-4 text-2xl font-semibold">My Rooms</h2>
			<div class="flex gap-2 mb-4 bg-card-bg p-4 rounded-lg shadow-sm items-stretch">
				<a href="/room" class="btn btn-primary mr-3">Create Room</a>
				<ui-modal
					buttonName="Join Existing Room"
					modalTitle="Join Existing Room"
				>
					@joinRoomForm()
				</ui-modal>
			</div>
			if len(rooms) == 0 {
				@noRooms()
			} else {
				<div class="room-list pt-4">
					for _, room := range rooms {
						@roomCard(room, userID)
					}
				</div>
			}
		</div>
		<script>
    // Initialize popover behavior when the page loads
    document.addEventListener('DOMContentLoaded', function () {
        const popover = document.getElementById('join-room-popover');

        // Hide popover initially (in case it's showing on load)
        if (popover) {
            popover.hidePopover();
        }
    });
</script>
	}
}

templ joinRoomForm() {
	<form id="join-room-form" submit="joinRoom">
		<div class="form-group">
			<label for="roomId" class="form-label">Room ID</label>
			<input type="text" id="roomId" name="roomId" class="form-input" placeholder="Enter room ID" required/>
			<div class="form-help-text">Enter the ID of the room you want to join</div>
		</div>
		<div class="form-actions">
			<button type="submit" class="btn btn-primary">Join Room</button>
		</div>
	</form>
}

templ noRooms() {
	<div class="rounded-lg p-4 shadow-sm bg-card-bg max-w-[500px] mx-auto text-center">
		<div class="mb-4 text-primary flex justify-center">
			<svg
				xmlns="http://www.w3.org/2000/svg"
				width="48"
				height="48"
				viewBox="0 0 24 24"
				fill="none"
				stroke="currentColor"
				stroke-width="2"
				stroke-linecap="round"
				stroke-linejoin="round"
			>
				<rect x="2" y="7" width="20" height="14" rx="2" ry="2"></rect>
				<path d="M16 2v5"></path>
				<path d="M8 2v5"></path>
				<path d="M3 10h18"></path>
			</svg>
		</div>
		<h3 class="text-2xl text-primary mb-4">No Rooms Found</h3>
		<p class="text-text-light mb-8">You haven't created or joined any rooms yet</p>
	</div>
}

// Success feedback after joining a room
templ JoinRoomSuccess(roomId string) {
	<div class="alert alert-success">
		Successfully joined the room!
	</div>
	<div class="form-actions mt-3">
		<a href={ templ.SafeURL(fmt.Sprintf("/room/%s", roomId)) } class="btn btn-primary">Go to Room</a>
		<button
			type="button"
			class="btn btn-secondary ml-2"
			popovertarget="join-room-popover"
			popovertargetaction="hide"
		>Close</button>
	</div>
}

templ roomCard(room database.Room, userID uint) {
	{{ isOwner := room.CreatedBy == userID }}
	<div class={ fmt.Sprintf("card mb-3 %s", templ.SafeClass(ternary(isOwner, "card-accent", ""))) }>
		<div class="card-header">
			<div class="room-header">
				<h3 class="title mb-0">{ room.Name }</h3>
				if isRecent(room.CreatedAt) {
					<span class="badge badge-primary">New</span>
				}
			</div>
			<div class="room-meta">
				<span class="room-date">Created { formatCreatedAt(room.CreatedAt) }</span>
				if isOwner {
					<span class="badge badge-owner">Owner</span>
				}
			</div>
		</div>
		<div class="card-body">
			<div class="flex justify-between items-stretch gap-2">
				<a href={ templ.SafeURL(fmt.Sprintf("/room/%d", room.ID)) } class="btn hover:bg-primary-dark">Join Room</a>
				if isOwner {
					<button
						class="btn btn-error hover:bg-red-700"
						hx-delete={ fmt.Sprintf("/room/%d", room.ID) }
						hx-confirm="Are you sure you want to delete this room? This action cannot be undone."
						hx-target="#room-list-container"
						hx-select="#room-list-container"
						hx-swap="outerHTML"
					>
						Delete
					</button>
				}
			</div>
		</div>
	</div>
}

func ternary(condition bool, trueVal, falseVal string) string {
	if condition {
		return trueVal
	}
	return falseVal
}

func formatCreatedAt(createdAt time.Time) string {
	return createdAt.Format("Jan 2, 2006")
}

func isRecent(createdAt time.Time) bool {
	return createdAt.After(time.Now().Add(-24 * time.Hour))
}