package homepage

import (
	"database/sql"
	"fmt"
	"github.com/markojerkic/spring-planing/cmd/web/components"
	"github.com/markojerkic/spring-planing/internal/database/dbgen"
	"time"
)

templ RoomList(rooms []dbgen.GetMyRoomsRow) {
	@components.PageLayout("Homepage") {
		<div class="container">
			<h1 class="mb-4">My Rooms</h1>
			<div class="room-actions-container mb-4">
				<a href="/room" class="btn btn-primary mr-3">Create Room</a>
				<button class="btn" popovertarget="join-room-popover">
					Join Existing Room
				</button>
			</div>
			if len(rooms) == 0 {
				@noRooms()
			} else {
				<div class="room-list pt-4">
					for _, room := range rooms {
						@roomCard(room)
					}
				</div>
			}
			<!-- Modern popover for joining a room -->
			<div id="join-room-popover" popover="manual" class="popover-container">
				<div class="popover-content">
					<div class="popover-header">
						<h2>Join Existing Room</h2>
						<button class="close-btn" popovertarget="join-room-popover" popovertargetaction="hide">
							&times;
						</button>
					</div>
					<div class="popover-body" id="join-room-form-container">
						@joinRoomForm()
					</div>
				</div>
			</div>
		</div>
		<script>
    // Initialize popover behavior when the page loads
    document.addEventListener('DOMContentLoaded', function () {
        const popover = document.getElementById('join-room-popover');

        // Hide popover initially (in case it's showing on load)
        if (popover) {
            popover.hidePopover();
        }
    });
</script>
	}
}

templ joinRoomForm() {
	<form id="join-room-form" hx-post="/join-room" hx-target="#join-room-form-container">
		<div class="form-group">
			<label for="roomId" class="form-label">Room ID</label>
			<input type="text" id="roomId" name="roomId" class="form-input" placeholder="Enter room ID" required/>
			<div class="form-help-text">Enter the ID of the room you want to join</div>
		</div>
		<div class="form-actions">
			<button type="submit" class="btn btn-primary">Join Room</button>
			<button
				type="button"
				class="btn btn-secondary ml-2"
				popovertarget="join-room-popover"
				popovertargetaction="hide"
			>Cancel</button>
		</div>
	</form>
}

templ noRooms() {
	<div class="empty-state">
		<div class="empty-state-icon">
			<svg
				xmlns="http://www.w3.org/2000/svg"
				width="48"
				height="48"
				viewBox="0 0 24 24"
				fill="none"
				stroke="currentColor"
				stroke-width="2"
				stroke-linecap="round"
				stroke-linejoin="round"
			>
				<rect x="2" y="7" width="20" height="14" rx="2" ry="2"></rect>
				<path d="M16 2v5"></path>
				<path d="M8 2v5"></path>
				<path d="M3 10h18"></path>
			</svg>
		</div>
		<h3 class="empty-state-title">No Rooms Found</h3>
		<p class="empty-state-description">You haven't created or joined any rooms yet</p>
	</div>
}

// Success feedback after joining a room
templ JoinRoomSuccess(roomId string) {
	<div class="alert alert-success">
		Successfully joined the room!
	</div>
	<div class="form-actions mt-3">
		<a href={ templ.SafeURL(fmt.Sprintf("/room/%s", roomId)) } class="btn btn-primary">Go to Room</a>
		<button
			type="button"
			class="btn btn-secondary ml-2"
			popovertarget="join-room-popover"
			popovertargetaction="hide"
		>Close</button>
	</div>
}

// Error feedback when joining fails
templ JoinRoomError(errorMsg string) {
	<div class="alert alert-error">
		{ errorMsg }
	</div>
	<form id="join-room-form" hx-post="/join-room" hx-target="#join-room-form-container">
		<div class="form-group">
			<label for="roomId" class="form-label">Room ID</label>
			<input
				type="text"
				id="roomId"
				name="roomId"
				class="form-input input-error"
				placeholder="Enter room ID"
				required
			/>
		</div>
		<div class="form-actions">
			<button type="submit" class="btn btn-primary">Try Again</button>
			<button
				type="button"
				class="btn btn-secondary ml-2"
				popovertarget="join-room-popover"
				popovertargetaction="hide"
			>Cancel</button>
		</div>
	</form>
}

templ roomCard(room dbgen.GetMyRoomsRow) {
	<div class={ fmt.Sprintf("card mb-3 %s", templ.SafeClass(ternary(room.IsOwner, "card-accent", ""))) }>
		<div class="card-header">
			<div class="room-header">
				<h3 class="title mb-0">{ room.Name }</h3>
				if room.CreatedAt.Valid && isRecent(room.CreatedAt) {
					<span class="badge badge-primary">New</span>
				}
			</div>
			<div class="room-meta">
				<span class="room-date">Created { formatCreatedAt(room.CreatedAt) }</span>
				if room.IsOwner {
					<span class="badge badge-owner">Owner</span>
				}
			</div>
		</div>
		<div class="card-body">
			<div class="room-actions">
				<a href={ templ.SafeURL(fmt.Sprintf("/room/%d", room.ID)) } class="btn mr-2">Join Room</a>
				if room.IsOwner {
					<button
						class="btn btn-secondary"
						hx-delete={ fmt.Sprintf("/room/%d", room.ID) }
						hx-confirm="Are you sure you want to delete this room? This action cannot be undone."
						hx-target="closest .card"
						hx-swap="outerHTML"
					>
						Delete
					</button>
				}
			</div>
		</div>
	</div>
}

func ternary(condition bool, trueVal, falseVal string) string {
	if condition {
		return trueVal
	}
	return falseVal
}

func formatCreatedAt(createdAt sql.NullTime) string {
	if createdAt.Valid {
		return createdAt.Time.Format("Jan 2, 2006")
	}
	return ""
}

func isRecent(createdAt sql.NullTime) bool {
	if createdAt.Valid {
		return createdAt.Time.After(time.Now().Add(-24 * time.Hour))
	}
	return false
}
